{
  "topic": "SC 2.1.1 â€” Keyboard",
  "tags": ["SC-2.1.1", "2.1.1", "wcag211"],
  "do": [
    "Ensure all interactive elements (links, buttons, form controls) are keyboard accessible using Tab navigation",
    "Provide keyboard equivalents for all mouse-dependent functionality (hover menus, drag-and-drop, click events)",
    "Use semantic HTML elements (button, input, a) which have built-in keyboard support",
    "Implement standard keyboard interactions: Tab/Shift+Tab for navigation, Enter/Space for activation, Arrow keys for menus",
    "Ensure custom widgets respond to appropriate keyboard events (keydown, keyup, keypress)",
    "Ensure each element is focusable by using tabindex='0' if not using native elements " ,
    "Make all form controls accessible via keyboard including complex controls like date pickers and sliders",
    "Provide keyboard access to media player controls (play, pause, volume, seek)",
    "Ensure dropdown menus can be navigated with arrow keys and activated with Enter",
    "Support Escape key to close modals, overlays, and expanded menus",
    "Implement roving tabindex for complex widgets like tab panels and toolbars",
    "Ensure all content revealed on hover is also available on keyboard focus",
    "Provide keyboard shortcuts for frequently used actions when appropriate",
    "Make image maps keyboard accessible using area elements with proper focus order",
    "Ensure carousel controls (next/previous/slider control elements) work with keyboard navigation",
    "Support Home/End keys for jumping to first/last items in lists or menus",
    "Ensure all interactive SVG elements are keyboard accessible with proper tabindex and event handlers",
    "Provide ARIA roles (e.g., role='tab' or role='button') if using non-semantic elements",
    "Add aria-selected, aria-label, or aria-controls as needed for screen reader context",
    "Make accordion/collapsible content keyboard navigable with Enter/Space to toggle",
    "Support Page Up/Page Down for large content areas and data tables",
    "Ensure context menus triggered by keyboard have proper navigation support"
  ],
  "dont": [
    "Do not rely solely on mouse events (onclick without keyboard equivalent, onmouseover without onfocus)",
    "Do not require specific timing for individual keystrokes (rapid key combinations, hold-and-release patterns)",
    "Do not use only pointing-device-specific event handlers (F54 failure)",
    "Do not remove focus when an element receives focus via script (F55 failure)",
    "Do not create keyboard traps where users cannot navigate away using standard keys",
    "Do not skip implementing keyboard support for custom interactive elements",
    "Do not use elements like div or span as buttons without proper role and keyboard handlers",
    "Do not ignore arrow key navigation for menus, lists, and composite widgets",
    "Do not fail to provide Escape key functionality for closing overlays and modals",
    "Do not assume touch gestures work for keyboard users (pinch, swipe, multi-touch)",
    "Do not use access keys that conflict with browser or assistive technology shortcuts",
    "Do not implement keyboard navigation that violates user expectations (non-standard key usage)",
    "Don't use <div>s or <span>s for interactive elements without role, tabindex, or events",
    "Do not leave custom controls without proper ARIA roles and keyboard interaction patterns",
    "Do not create interfaces that require mouse precision that cannot be replicated with keyboard",
    "Do not use CSS :hover effects for essential functionality without :focus equivalents",
    "Do not implement drag-and-drop without keyboard-accessible alternative methods",
    "Do not use onchange events on select elements without considering keyboard navigation impact",
    "Do not create infinite scroll without keyboard-accessible 'load more' alternatives",
    "Do not implement slider controls without arrow key support for value adjustment",
    "Do not use double-click functionality without single-click keyboard equivalent",
    "If Interactive elements are implemented by <a> or <button> have tabindex="-1" Mark it as fail."
  ],
  "edge_cases": [
    "Path-dependent input exceptions: Drawing programs, painting applications, games requiring precise mouse movements are exempt",
    "Modal dialogs: Focus must be trapped within modal, Escape key closes modal, focus returns to trigger element",
    "Autocomplete widgets: Must allow keyboard navigation through suggestions, Enter selects, Escape closes",
    "Tab panels: Arrow keys navigate between tabs, Tab moves focus into panel content, proper ARIA implementation required",
    "Data tables with sorting: Column headers must be keyboard accessible, space/enter triggers sort, visual feedback provided",
    "Infinite scroll implementations: Provide keyboard accessible 'load more' button alternative",
    "Custom dropdown selects: Arrow keys navigate options, typing filters/jumps to options, Enter selects",
    "Tree views: Arrow keys expand/collapse and navigate, Enter activates selected item, proper ARIA tree roles",
    "Sliders and range inputs: Arrow keys adjust values, Home/End go to min/max, Page Up/Down for larger increments",
    "Context menus: Keyboard shortcut or menu key triggers, arrow navigation, Enter activates, Escape closes",
    "Drag-and-drop interfaces: Provide keyboard alternative (cut/copy/paste, dedicated move buttons)",
    "Image cropping tools: Provide keyboard controls for crop area adjustment and positioning",
    "Calendar date pickers: Arrow keys navigate dates, Enter selects, proper month/year navigation",
    "Multi-select list boxes: Ctrl+click equivalent using Ctrl+Space, Shift+arrows for range selection",
    "Resizable panels/splitters: Provide keyboard controls for adjusting panel sizes (arrow keys with modifiers)",
    "Video players with timeline scrubbing: Arrow keys for seek, number keys for percentage jumps",
    "Interactive maps: Keyboard controls for zoom, pan, and selecting map features",
    "Code editors: Ensure all editing features work with keyboard (find/replace, folding, autocomplete)",
    "Virtual keyboards/on-screen keyboards: Must be navigable via physical keyboard",
    "Games with accessibility features: Provide keyboard alternatives for essential gameplay mechanics",
    "Drawing/sketching tools: Exempt from full keyboard access but provide keyboard shortcuts for tools",
    "3D model viewers: Arrow keys for rotation, zoom controls, keyboard shortcuts for view presets"
  ],
  "techniques": [
    "G202: Ensuring keyboard control for all functionality",
    "G90: Providing keyboard-triggered event handlers",
    "H91: Using HTML form controls and links",
    "SCR20: Using both keyboard and other device-specific functions",
    "SCR35: Making actions keyboard accessible by using onclick events on links and buttons",
    "SCR2: Using redundant keyboard and mouse event handlers",
    "G108: Using markup features to expose the name and role of user interface components",
"ARIA4",
"ARIA5",
"ARIA6",
"ARIA9"
  ],
  "axe_rules_hint": [
    "keyboard: Ensures elements are keyboard accessible",
    "focusable-element: Ensures focusable elements have accessible names",
    "tabindex: Ensures tabindex attribute values are not greater than 0",
    "focus-order-semantics: Ensures elements in focus order have appropriate role",
    "nested-interactive: Ensures interactive elements are not nested",
    "aria-roles",
    "button-name", 
    "focusable-content, keyboard"
  ],
  "failures": [
    "F54: Using only pointing-device-specific event handlers for a function",
    "F55: Using script to remove focus when focus is received", 
    "F42: Emulating links using non-link elements without proper keyboard handling"
  ],
  "real_world_scenarios": [
    "E-commerce product filters: All filter checkboxes, dropdowns, and price sliders must work with keyboard",
    "Social media platforms: Like buttons, share options, comment forms all keyboard accessible",
    "Banking applications: All transaction forms, account navigation, security features keyboard operable",
    "Video streaming services: Play controls, volume, captions, quality settings, timeline scrubbing via keyboard",
    "Email clients: Compose, send, folder navigation, search, attachment handling all keyboard accessible",
    "Online learning platforms: Course navigation, video controls, quiz interactions, discussion forums via keyboard",
    "CRM systems: Contact forms, data entry, search filters, bulk actions all keyboard operable",
    "Travel booking sites: Date selection, seat maps, payment forms, itinerary management keyboard accessible",
    "News websites: Article navigation, comment systems, newsletter signups, social sharing via keyboard",
    "Project management tools: Task creation, drag-drop alternatives, timeline navigation, team collaboration features keyboard accessible"
  ]
}

