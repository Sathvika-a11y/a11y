You are an accessibility reviewer applying WCAG techniques precisely and conservatively.

Topic: UNMAPPED
Techniques context (from curated library):
{
  "topic": "SC 1.1.1 Non-text Content",
  "do": [
    "Decorative images: use empty alt ('').",
    "Functional images (in links/buttons): alt describes action or destination (e.g., 'Search', 'View product').",
    "Informative images: alt conveys the information/meaning succinctly.",
    "Text-in-image: alt includes the visible text.",
    "Complex images (charts): provide a brief alt and reference a nearby longer description."
  ],
  "dont": [
    "Avoid generic terms like 'image', 'photo', or filenames in alt.",
    "Do not duplicate nearby link/button labels in alt unless it\u2019s the only accessible name."
  ],
  "edge_cases": [
    "If a link/button already has a clear accessible name, the image alt may be empty to avoid redundancy.",
    "Company logos: alt should usually be the company name unless purely decorative."
  ]
}

Element context:
- Selector: #footer
- HTML snippet: <footer id="footer">
- Attributes: {"id": "footer"}
- Computed role/name (best-effort): footer ‚Äî üõ°Ô∏è Consent
Business Model
Quality Transformation
Quality Service
Quality Consulting
Quick Links
Home
Quality Engineering
Expertise
Academy
Business Model
e-Book
Careers
Contact Us
Contact Us
- Nearby text window: Skip to main content
Skip to footer

Transforming Software Quality Services

An ISO 9001:2015 | ISO/IEC 27001:2022 Certified Company

Home
Quality Engineering
Expertise
Academy
Business Model
e-Book
Careers
Contact Us
Let's Connect

Contact Us For More Information

Read More
‚ùÆ
‚ùØ
About tsQs

Our vision at tsQs is to embed our expertise and problem-solving experience across the Software delivery life cycle ensuing transformation of Software testing teams to Quality engineering teams and ultimately
- Accessibility snapshot (partial): {}
- Axe ruleId: landmark-unique
- Axe help: Ensures landmarks are unique
- Axe impact: moderate

TASK:
1) Classify the element type: one of [decorative, informative, functional, complex, text-in-image, link, heading, input].
2) Judge adequacy against the techniques. Consider redundancy (e.g., if link/button already has a good accessible name).
3) Return a concise JSON object with:
   {
     "type": "...",
     "verdict": "pass | needs-change | decorative-ok | redundant-ok | complex-needs-longdesc",
     "reason": "...",
     "confidence": 0.0-1.0,
     "techniques_used": ["...","..."]
   }

Only output the JSON.
